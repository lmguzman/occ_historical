mu.psi.yr = all_scenarios$mu.psi.yr[s],
sigma.psi.yr = all_scenarios$sigma.psi.yr[s],
## visit
mu.v.0 = all_scenarios$mu.v.0[s],
mu.v.yr = all_scenarios$mu.v.yr[s],
## type sym
type.range = all_scenarios$type.range[s],
type.visit = all_scenarios$type.visit[s],
prop.visits.same = all_scenarios$prop.visits.same[s])
dd <- sim.data
## keep only detected species:
sp.keep <- which(apply(dd$Z, 1, sum, na.rm=TRUE)>0)
## which sites to keep will depend on limit.to.visits
## keep all sites, even those without any detections
if(limit.to.visits=='all') {
site.keep <- 1:dd$nsite
}
## keep only sites that were visited
if(limit.to.visits=='visits') {
site.keep <- which(apply(dd$vis.arr, 2, sum, na.rm = TRUE)>0)
}
## keep only sites that yielded a detection of at least one species
if(limit.to.visits=='detected') {
site.keep <- which(apply(dd$X, 'site', sum, na.rm = TRUE)>0)
}
## subset based on the above
dd$Z        <- dd$Z[sp.keep,site.keep,,drop=FALSE]
dd$X        <- dd$X[sp.keep,site.keep,,,drop=FALSE]
dd$sp.range <- dd$sp.range[sp.keep,site.keep,drop=FALSE]
dd$vis.arr  <- dd$vis.arr[sp.keep,site.keep,,,drop=FALSE]
dd$nsp      <- length(sp.keep)
dd$nsite    <- length(site.keep)
dd$vis.col <- dd$vis.col[site.keep,,,drop=FALSE]
####### time interval ###
## convert data into long format
presence.only <- which(dd$X==1, arr.ind=TRUE) %>% data.frame()
visits.only <- which(dd$vis.arr==1, arr.ind=TRUE) %>% data.frame()
names(visits.only) <- c("sp", "site", "yr", "visit")
new_year <- expand.grid(yr = 1:dd$nyr, visit = 1:dd$nvisit) %>%
arrange(yr) %>%
mutate(syr = 1:n())
presence.new.year <- presence.only %>%
left_join(new_year)
visits.new.year <- visits.only %>%
left_join(new_year)
#### use given time interval to bin ###
# time.interval.yr <- 2
# time.interval.visit <- 3
unique.syr <- unique(sort(presence.new.year$syr))
time.cut.yr <- as.numeric(cut(unique.syr, time.interval.yr))
time.cut.visit <- as.numeric(cut(unique.syr, time.interval.visit*time.interval.yr))
time.cut.visit.2 <-  rep(rep(1:time.interval.visit, each = max(unique.syr)/(time.interval.yr*time.interval.visit)),
time.interval.yr)
new.time.interval <-data.frame(syr = unique.syr, time.cut.yr, time.cut.visit, time.cut.visit.2)
presence.new.time.interval <- presence.new.year %>%
left_join(new.time.interval) %>%
group_by(sp, site, time.cut.yr, time.cut.visit.2) %>%
summarise(presence = 1) %>%
mutate(sp = paste('sp',str_pad(sp,4,pad='0'),sep='_'),
site = paste('site',str_pad(site,4,pad='0'),sep='_'),
yr = paste('yr',time.cut.yr,sep='_'),
visit = paste('v',time.cut.visit.2,sep='_'))
visits.new.time.interval <- visits.new.year %>%
left_join(new.time.interval) %>%
group_by(sp, site, time.cut.yr, time.cut.visit.2) %>%
summarise(presence = 1) %>%
mutate(sp = paste('sp',str_pad(sp,4,pad='0'),sep='_'),
site = paste('site',str_pad(site,4,pad='0'),sep='_'),
yr = paste('yr',time.cut.yr,sep='_'),
visit = paste('v',time.cut.visit.2,sep='_'))
# presence.new.time.interval$time.cut.yr %>% table()
# presence.new.time.interval$time.cut.visit %>% table()
occ.arr <- array(0, dim = c(dd$nsp, dd$nsite, time.interval.yr, time.interval.visit),
dimnames = list(sp=dimnames(dd$X)$sp,
site=dimnames(dd$X)$site,
year= paste0("yr_", 1:time.interval.yr),
visit=paste0("v_", 1:time.interval.visit)))
occ.arr[cbind(match(presence.new.time.interval$sp, dimnames(dd$X)$sp), match(presence.new.time.interval$site, dimnames(dd$X)$site),
match(presence.new.time.interval$yr, paste0("yr_", 1:time.interval.yr)),
match(presence.new.time.interval$visit,paste0("v_", 1:time.interval.visit)))] <- 1
vis.arr <- array(0, dim = c(dd$nsp, dd$nsite, time.interval.yr, time.interval.visit),
dimnames = list(sp=dimnames(dd$X)$sp,
site=dimnames(dd$X)$site,
year= paste0("yr_", 1:time.interval.yr),
visit=paste0("v_", 1:time.interval.visit)))
vis.arr[cbind(match(visits.new.time.interval$sp, dimnames(dd$X)$sp), match(visits.new.time.interval$site, dimnames(dd$X)$site),
match(visits.new.time.interval$yr, paste0("yr_", 1:time.interval.yr)),
match(visits.new.time.interval$visit,paste0("v_", 1:time.interval.visit)))] <- 1
dd$X2 <- occ.arr
dd$vis.arr2 <- vis.arr
limit.to.visits <- "visits"
time.interval.yr <- 2
time.interval.visit <- 3
## keep only detected species:
sp.keep <- which(apply(dd$Z, 1, sum, na.rm=TRUE)>0)
## which sites to keep will depend on limit.to.visits
## keep all sites, even those without any detections
if(limit.to.visits=='all') {
site.keep <- 1:dd$nsite
}
## keep only sites that were visited
if(limit.to.visits=='visits') {
site.keep <- which(apply(dd$vis.arr, 2, sum, na.rm = TRUE)>0)
}
## keep only sites that yielded a detection of at least one species
if(limit.to.visits=='detected') {
site.keep <- which(apply(dd$X, 'site', sum, na.rm = TRUE)>0)
}
## subset based on the above
dd$Z        <- dd$Z[sp.keep,site.keep,,drop=FALSE]
dd$X        <- dd$X[sp.keep,site.keep,,,drop=FALSE]
dd$sp.range <- dd$sp.range[sp.keep,site.keep,drop=FALSE]
dd$vis.arr  <- dd$vis.arr[sp.keep,site.keep,,,drop=FALSE]
dd$nsp      <- length(sp.keep)
dd$nsite    <- length(site.keep)
dd$vis.col <- dd$vis.col[site.keep,,,drop=FALSE]
####### time interval ###
## convert data into long format
presence.only <- which(dd$X==1, arr.ind=TRUE) %>% data.frame()
visits.only <- which(dd$vis.arr==1, arr.ind=TRUE) %>% data.frame()
names(visits.only) <- c("sp", "site", "yr", "visit")
new_year <- expand.grid(yr = 1:dd$nyr, visit = 1:dd$nvisit) %>%
arrange(yr) %>%
mutate(syr = 1:n())
presence.new.year <- presence.only %>%
left_join(new_year)
visits.new.year <- visits.only %>%
left_join(new_year)
#### use given time interval to bin ###
# time.interval.yr <- 2
# time.interval.visit <- 3
unique.syr <- unique(sort(presence.new.year$syr))
time.cut.yr <- as.numeric(cut(unique.syr, time.interval.yr))
time.cut.visit <- as.numeric(cut(unique.syr, time.interval.visit*time.interval.yr))
time.cut.visit.2 <-  rep(rep(1:time.interval.visit, each = max(unique.syr)/(time.interval.yr*time.interval.visit)),
time.interval.yr)
new.time.interval <-data.frame(syr = unique.syr, time.cut.yr, time.cut.visit, time.cut.visit.2)
presence.new.time.interval <- presence.new.year %>%
left_join(new.time.interval) %>%
group_by(sp, site, time.cut.yr, time.cut.visit.2) %>%
summarise(presence = 1) %>%
mutate(sp = paste('sp',str_pad(sp,4,pad='0'),sep='_'),
site = paste('site',str_pad(site,4,pad='0'),sep='_'),
yr = paste('yr',time.cut.yr,sep='_'),
visit = paste('v',time.cut.visit.2,sep='_'))
visits.new.time.interval <- visits.new.year %>%
left_join(new.time.interval) %>%
group_by(sp, site, time.cut.yr, time.cut.visit.2) %>%
summarise(presence = 1) %>%
mutate(sp = paste('sp',str_pad(sp,4,pad='0'),sep='_'),
site = paste('site',str_pad(site,4,pad='0'),sep='_'),
yr = paste('yr',time.cut.yr,sep='_'),
visit = paste('v',time.cut.visit.2,sep='_'))
# presence.new.time.interval$time.cut.yr %>% table()
# presence.new.time.interval$time.cut.visit %>% table()
occ.arr <- array(0, dim = c(dd$nsp, dd$nsite, time.interval.yr, time.interval.visit),
dimnames = list(sp=dimnames(dd$X)$sp,
site=dimnames(dd$X)$site,
year= paste0("yr_", 1:time.interval.yr),
visit=paste0("v_", 1:time.interval.visit)))
occ.arr[cbind(match(presence.new.time.interval$sp, dimnames(dd$X)$sp), match(presence.new.time.interval$site, dimnames(dd$X)$site),
match(presence.new.time.interval$yr, paste0("yr_", 1:time.interval.yr)),
match(presence.new.time.interval$visit,paste0("v_", 1:time.interval.visit)))] <- 1
vis.arr <- array(0, dim = c(dd$nsp, dd$nsite, time.interval.yr, time.interval.visit),
dimnames = list(sp=dimnames(dd$X)$sp,
site=dimnames(dd$X)$site,
year= paste0("yr_", 1:time.interval.yr),
visit=paste0("v_", 1:time.interval.visit)))
vis.arr[cbind(match(visits.new.time.interval$sp, dimnames(dd$X)$sp), match(visits.new.time.interval$site, dimnames(dd$X)$site),
match(visits.new.time.interval$yr, paste0("yr_", 1:time.interval.yr)),
match(visits.new.time.interval$visit,paste0("v_", 1:time.interval.visit)))] <- 1
dd$X2 <- occ.arr
dd$vis.arr2 <- vis.arr
dd$X2
get.indices <- function(sp) {
## visited array
vis.arr <- dd$vis.arr2[sp,,,]
## if modelling all visits, set visit array to 1 everywhere
if(limit.to.visits=='all')
vis.arr[TRUE] <- 1
## if modelling sites with detections only, create new visit array
if(limit.to.visits=='detected') {
nsp.detected <- apply(dd$X2, 2:4, sum, na.rm = TRUE)
vis.arr[TRUE] <- 1
vis.arr[nsp.detected==0] <- 0
}
}
dd$sp.range
dim(dd$X2)
grid <- st_make_grid(sfc, cellsize=1/dd$nsite, square=TRUE)
library(sf)
grid <- st_make_grid(sfc, cellsize=1/dd$nsite, square=TRUE)
sfc <- st_sfc(st_polygon(list(rbind(c(0,0),
c(1,0),
c(1,1),
c(0,0)))))
# create the grid using the specified grid size.
grid <- st_make_grid(sfc, cellsize=1/dd$nsite, square=TRUE)
plot(grid)
head(grid)
grid <- st_make_grid(sfc, cellsize=1/dd$nsite, square=TRUE) %>%
dplyr::mutate(GID=row_number())
sfc <- st_polygon(list(rbind(c(0,0),
c(1,0),
c(1,1),
c(0,0))))
# create the grid using the specified grid size.
grid <- st_make_grid(sfc, cellsize=1/dd$nsite, square=TRUE) %>%
dplyr::mutate(GID=row_number())
sfc <- st_sfc(st_polygon(list(rbind(c(0,0),
c(1,0),
c(1,1),
c(0,0)))))
# create the grid using the specified grid size.
grid <- st_make_grid(sfc, cellsize=1/dd$nsite, square=TRUE) %>%
st_as_sf() %>%
dplyr::mutate(GID=row_number())
head(grid)
plot(grid)
table(grid$GID)
1/100
dd$nsite
grid <- st_make_grid(sfc, cellsize=1/10, square=TRUE) %>%
st_as_sf() %>%
dplyr::mutate(GID=row_number())
table(grid$GID)
dim(dd$X2)
dd$X2[1,,,]
sapply(dd$X2[1,,,], sum)
rowSums(dd$X2, dims=2)
rowSums(dd$X2, dims=1)
rowSums(dd$X2, dims=3)
rowSums(dd$X2, dims=4)
rowSums(dd$X2, dims=1)
rowSums(dd$X2, dims=2)
rowSums(dd$X2, dims=3)
rowSums(dd$X2, dims=c(1,2))
?rowSums
colSums(dd$X2, dims=1)
colSums(dd$X2, dims=2)
colSums(dd$X2, dims=3)
colSums(dd$X2, dims=4)
colSums(dd$X2, dims=0)
colSums(dd$X2, dims=1)
?aperm
aperm(apply(dd$X2, c(1,2), cumsum))
aperm(apply(dd$X2, c(1,2,3), cumsum))
aperm(apply(dd$X2, c(1,3), cumsum))
aperm(apply(dd$X2, c(1,2), cumsum), c(2))
aperm(apply(dd$X2, c(1,2), cumsum), c(2,3))
aperm(apply(dd$X2, c(1,2), cumsum), c(2,3,4))
aperm(apply(dd$X2, c(1,2), cumsum), c(1,2,3))
aperm(apply(dd$X2, c(2), cumsum), c(1,2,3))
aperm(apply(dd$X2, c(2), cumsum), c(1,2))
aperm(apply(dd$X2, c(2), cumsum), c(2,3))
aperm(apply(dd$X2, c(2), cumsum), c(1))
apply(dd$X2, 2, cumsum)
apply(dd$X2, c(1,2), cumsum)
apply(dd$X2, c(2,3), cumsum)
apply(dd$X2, c(2,3,4), cumsum)
apply(dd$X2, c(1,2,3,4), cumsum)
colSums(aperm(dd$X2, c(1,2)))
colSums(aperm(dd$X2, c(1,2,3,4)))
colSums(aperm(dd$X2, c(1,2,4,3)))
colSums(aperm(dd$X2, c(4,3,1,2)))
colSums(aperm(dd$X2, c(4,3,2,1)))
colSums(aperm(dd$X2, c(4,1,2,3)))
colSums(aperm(dd$X2, c(4,1,2,3)))[1]
colSums(aperm(dd$X2, c(4,1,2,3)))[1,]
dim(colSums(aperm(dd$X2, c(4,1,2,3))))
dim(rowSums(colSums(aperm(dd$X2, c(4,1,2,3)))))
dd$X2[1,]
dd$X2[1,,,]
sum(dd$X2[1,,,])
rowsum(dd$X2[1,,,])
rowSums(dd$X2[1,,,], c(2,3,4))
i <- 1
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_GID
j=2
sp_GID[j]
sp_centroids <- sp_centroids %>% append(centroid(grid[j,]))
sp_centroids <- c()
sp_centroids <- sp_centroids %>% append(centroid(grid[j,]))
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,]))
sp_centroids
sp_centroids$x
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,]))
}
}
sp_poly[[i]] <- st_convex_hull(sp_centroids)
}
sp_centroids
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,])) %>%
unlist()
}
}
}
sp_centroids
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,]))
}
}
sp_centroid <- do.call(rbind(sp_centroids))
}
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,]))
}
}
sp_centroid <- do.call(rbind, sp_centroids)
}
sp_centroids
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,]))
}
}
sp_centroid <- do.call(rbind, unlist(sp_centroids))
}
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,]))
}
}
}
sp_centroids
st_centroid(grid[j,])
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,])$x)
}
}
}
sp_centroids
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,])$x)
}
}
sp_poly[[i]] <- st_convex_hull(sp_centroids)
}
plot(sp_poly[[1]])
plot(sp_poly[[2]])
plot(sp_poly[[3]])
st_convex_hull(sp_centroids)
?gtm
?qtm
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_multipoint(st_centroid(grid[j,])$x))
}
}
sp_poly[[i]] <- st_convex_hull(sp_centroids)
}
st_centroid(grid[j,])$x)
st_centroid(grid[j,])$x
centroid <- st_centroid(grid[j,])$x
centroid
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,])$x)
}
sp_centroids <- st_multipoint(sp_centroids)
}
sp_poly[[i]] <- st_convex_hull(sp_centroids)
}
sp_centroids <- st_multipoint(sp_centroids)
sp_centroids <- st_cast(sp_centroids, to="MULTIPOINT")
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,])$x)
}
sp_centroids <- st_cast(sp_centroids, to="MULTIPOINT")
}
sp_poly[[i]] <- st_convex_hull(sp_centroids)
}
sp_centroids
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,])$x)
}
#sp_centroids <- st_cast(sp_centroids, to="MULTIPOINT")
}
#sp_poly[[i]] <- st_convex_hull(sp_centroids)
}
sp_centroids
test <- st_cast(sp_centroids, "MULTIPOINT")
plot(test)
test2 <- st_convex_hull(test)
plot(test2)
install.packages("tmap")
install.packages("tmap")
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[1,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,])$x)
}
}
sp_poly[[i]] <- st_convex_hull(st_union(sp_centroids))
}
plot(sp_poly[[1]])
plot(sp_poly[[2]])
plot(sp_poly[[3]])
sp_poly <- list()
for(i in 1:dd$nsp){
sp_GID <- rowSums(dd$X2[i,,,], c(2,3,4))
sp_centroids <- c()
for(j in 1:dd$nsite){
if(sp_GID[j] >= 1){
sp_centroids <- sp_centroids %>% append(st_centroid(grid[j,])$x)
}
}
sp_poly[[i]] <- st_convex_hull(st_union(sp_centroids))
}
plot(sp_poly[[1]])
plot(sp_poly[[2]])
plot(sp_poly[[3]])
plot(sp_poly[[4]])
plot(sp_poly[[5]])
plot(sp_poly[[6]])
plot(sp_poly[[7]])
plot(sp_poly[[8]])
plot(sp_poly[[9]])
plot(sp_poly[[11]])
plot(sp_poly[[12]])
plot(sp_poly[[13]])
plot(sp_poly[[14]])
plot(sp_poly[[15]])
plot(sp_poly[[16]])
plot(sp_poly[[17]])
plot(sp_poly[[18]])
plot(sp_poly[[50]])
length(sp_poly[[1]])
length(sp_poly)
matrix_ls <- list()
n_poly <- dd$nsp
grid_size <- sqrt(dd$nsite)
matrix_ls <- list()
n_poly <- dd$nsp
grid_size <- sqrt(dd$nsite)
for(i in 1:n_poly){
mtrx <- st_intersects(st_as_sf(grid),
st_as_sf(sp_poly[[i]]))
matrix_ls[[i]] <- matrix(as.matrix(mtrx), nrow=grid_size, ncol=grid_size)
}
matrix_lspp1
matrix_ls[[1]]
dim(matrix_ls[[1]])
dd$sp.range
dd$sp.range2 <- array(unlist(matrix_ls, dim=c(dd$nsp, dd$nsite)))
dd$sp.range2 <- array(unlist(matrix_ls), dim=c(dd$nsp, dd$nsite))
dd$sp.range2
vis.arr[!dd$sp.range2[sp,],,] <- 0
tmp <- which(vis.arr==1, arr.ind=TRUE)
indices <- cbind(rep(sp,nrow(tmp)),tmp)
