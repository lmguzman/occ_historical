'mu.psi.0',
'sigma.psi.sp',
'mu.psi.yr',
'sigma.psi.yr')
# run the all_all model
# set model parameters
n.iter=1e4
n.burnin=1e2
n.adapt=1e2
n.thin=3e1
n.chains=3
# save workspace to port to ComputeCanada
save.image("ODE_env.RData")
str(dd_all_all_prep)
# This script ingests GBIF and iDigBio data to explore real-world
# scenarios of museum data collection, community collection, visit
# probabilities and multispecies occupancy modeling for Odonates
# in eastern North America.
# load libraries
library(tidyverse); library(taxotools); library(data.table)
library(sf); library(cowplot); library(maps); library(mapdata)
library(ggpubr); library(nimble); library(raster)
# source prewritten functions from the simulation studies
source('prep_data_real.R')
# load a basemap
basemap <- map_data("usa")
# read in GBIF and iDigBio data
gbif_dat <- fread("../data/gbif.csv",
sep="\t",
stringsAsFactors=FALSE,
quote="")
occ_dat <- gbif_dat
# filter the occurrence data to a sensible time frame (1970s-2010s)
sp_list <- as.data.frame(table(occ_dat$species)) %>%
dplyr::filter(Freq >= 100)
occ_dat <- occ_dat %>%
filter(between(year, 1970, 2019), !is.na(species), species!="", species %in% sp_list$Var1) %>%
dplyr::select(species, year, decimalLatitude, decimalLongitude)
head(occ_dat)
plot(occ_dat$decimalLongitude, occ_dat$decimalLatitude)
# convert the occurrence data to a spatial object
occ_spat <- st_as_sf(occ_dat,
coords=c("decimalLongitude", "decimalLatitude"))
head(occ_spat)
# create a grid of 1-degree cells across the study landscape, clip to land
grid_1 <- st_make_grid(extent(occ_spat), cellsize=2) %>%
st_as_sf() %>%
dplyr::mutate(GID=row_number())
ggplot()+
geom_sf(grid_1, mapping=aes(), fill=NA)+
geom_sf(sample_n(occ_spat, 5000), mapping=aes(), alpha=0.5)+
theme_map()
# format occurrence data for data.prep function
# there are two cases here, all and detection. All includes
# all species at all sites, detection sites where one other species
# was detected. Range maps are inferred from convex polygons that
# are derived from occurrence data
# make range maps from convex polygons
range <- list()
sp_list <- unique(occ_spat$species)
for(i in 1:length(sp_list)){
range[[i]] <- st_convex_hull(st_union(filter(occ_spat,
species==sp_list[i])))
}
grid1_plot <- ggplot()+
geom_polygon(data=basemap, mapping=aes(x=long, y=lat))+
geom_sf(grid_1, mapping=aes(), fill=NA, color="grey")+
geom_sf(range[[1]], mapping=aes(), fill="cyan", color="cyan", alpha=0.35)+
geom_sf(filter(occ_spat, species==sp_list[1]), mapping=aes(), color="cyan")+
geom_sf(range[[2]], mapping=aes(), fill="red", color="red", alpha=0.35)+
geom_sf(filter(occ_spat, species==sp_list[2]), mapping=aes(), color="red")+
geom_sf(range[[10]], mapping=aes(), fill="gold", color="gold", alpha=0.35)+
geom_sf(filter(occ_spat, species==sp_list[10]), mapping=aes(), color="gold")+
scale_x_continuous(limits=c(-93, -60))+
theme_map()
# intersect range maps with the grid
grid_int <- list()
for(i in 1:length(range)){
grid_int[[i]] <- matrix(as.matrix(st_intersects(grid_1, range[[i]])), nrow=24, ncol=26)
}
res <- array(unlist(grid_int), dim=c(length(unique(occ_dat$species)), nrow(grid_1)))
# assign occurrences to the grid, create era codes for each
# occurrence, then take only unique era/visit/grid/species occurrences
sp_list <- sp_list %>% as.data.frame()
colnames(sp_list) <- c("species")
sp_list <- sp_list %>%
dplyr::mutate(SPID=row_number())
occ_grid <- occ_spat %>%
st_intersection(grid_1) %>%
dplyr::mutate(era=(year-year%%10)) %>%
dplyr::mutate(year=(year-era)+1) %>%
dplyr::mutate(era=(era-1960)/10) %>%
left_join(sp_list) %>%
dplyr::select(SPID, era, year, GID) %>%
unique()
head(occ_grid)
occ_grid <- occ_grid %>%
dplyr::mutate(year=case_when(year %in% c(1,2) ~ 1,
year %in% c(3,4) ~ 2,
year %in% c(5,6) ~ 3,
year %in% c(7,8) ~ 4,
year %in% c(9,10) ~ 5))
head(occ_grid)
ggplot()+
geom_polygon(data=basemap, mapping=aes(x=long, y=lat))+
#geom_sf(grid_1, mapping=aes(), fill=NA, color="grey")+
geom_sf(sample_n(occ_grid, 10000), mapping=aes(color=as.factor(era)), alpha=0.5)+
scale_x_continuous(limits=c(-93, -60))+
theme_map()
# create the master matrix of occurrences
X <- array(NA, dim=c(nsp=nrow(sp_list),
nsite=nrow(grid_1),
nyr=5,
nvisit=5))
for(i in 1:nrow(occ_grid)){
X[occ_grid$SPID[i],
occ_grid$GID[i],
occ_grid$era[i],
occ_grid$year[i]] <- 1
}
Z <- apply(X, c(1,2,3), sum)
dd <- list(Z=Z, X=X, nsite=nrow(grid_1), nsp=nrow(sp_list), nyr=5, nvisit=5,
vis.arr=array(1, dim=c(nsp=nrow(sp_list),
nsite=nrow(grid_1),
nyr=5,
nvisit=5)),
sp.range=res)
# all_all modeling case
dd_all_all <- dd
dd_all_all_prep <- prep.data(dd_all_all, limit.to.visits="all",
limit.to.range="no")
# detected_all modeling case
dd_det_all <- dd
dd_det_all_prep <- prep.data(dd_det_all, limit.to.visits="detected",
limit.to.range="no")
# detected_range modeling case
dd_det_range <- dd
dd_det_range_prep <- prep.data(dd_det_range, limit.to.visits="detected",
limit.to.range="yes")
# model code
ms_nimble <- nimbleCode({
### priors
#### detection #####
mu.p.0   ~ dnorm(mean = 0, sd= 10)
## effect of yr on detection
p.yr ~ dnorm(mean = 0, sd = 10)
## random effect of species on detection
sigma.p.sp   ~ dunif(min = 0, max = 10)
for(sp in 1:nsp) {
p.sp[sp]   ~ dnorm(mean = 0, sd = sigma.p.sp)
}
#
## random effect of site on detection
sigma.p.site ~ dunif(min = 0, max = 10)
for(site in 1:nsite) {
for(yr in 1:nyr) {
p.site[site,yr]   ~ dnorm(0, sd = sigma.p.site)
}
}
#### occupancy.
## intercepts
mu.psi.0 ~ dnorm(mean = 0, sd = 10)
# species specific intercepts
sigma.psi.sp ~ dunif(0,10)
for(sp in 1:nsp){
psi.sp[sp] ~ dnorm(0,sd = sigma.psi.sp)
}
## species specific slopes
mu.psi.yr ~ dnorm(0, sd = 10)
sigma.psi.yr ~ dunif(0,10)
for(sp in 1:nsp){
psi.yr[sp] ~ dnorm(mu.psi.yr, sd = sigma.psi.yr)
}
for(sp in 1:nsp) {
for(yr in 1:nyr) {
## occupancy
logit(psi[yr,sp]) <-
mu.psi.0 +
psi.yr[sp]*(yr-1) +
psi.sp[sp]
## detection
for(site in 1:nsite) {
logit(p[site,yr,sp]) <-
mu.p.0 +
p.yr*(yr-1) +
p.sp[sp] +
p.site[site,yr]
}
}
}
## latent state and likelihood
for(sp in 1:nsp){
for(site in 1:nsite){
for(yr in 1:nyr) {
#latent state
Z[site,yr,sp] ~ dbern(psi[yr,sp])
}
}
}
for(ind in 1:nind) {
mu.p[ind] <-
Z[sitev[ind],yrv[ind],spv[ind]] *
p[sitev[ind],yrv[ind],spv[ind]]
X[ind] ~ dbern(mu.p[ind])
}
})
params <- c('mu.p.0',
'p.yr',
'sigma.p.sp',
'sigma.p.site',
'mu.psi.0',
'sigma.psi.sp',
'mu.psi.yr',
'sigma.psi.yr')
# run the all_all model
# set model parameters
n.iter=1e4
n.burnin=1e2
n.adapt=1e2
n.thin=3e1
n.chains=3
# save workspace to port to ComputeCanada
save.image("ODE_env.RData")
str(dd_all_all_prep)
?save
setwd("D:/Github/occ_historical")
###### Part 1 #####
## 1.
# Simulation:
# - All species are everywhere, no ranges
# - Missing visits but same visit for all species
# Modeling:
# MS_all_all, MS_all_visits vs MS_all_detected for more than 2 eras
# this would be useful for a scenario that has small spatial scale
library(parallel)
library(dplyr)
source('multi_sp/simulation/src/simulate_ms.R')
expand.grid.df <- function(...) Reduce(function(...) merge(..., by=NULL), list(...))
## Make a data frame of the parameters
## Change either p.yr, or mu.psi.yr
base_scenario <- data.frame(nsp          = 50,
nsite        = 100,
nvisit       = 3,
## detection
mu.p.0 = -0.5,
sigma.p.site = 1.5,
sigma.p.sp = 0.5,
## occupancy
mu.psi.0 = 0,
sigma.psi.sp = 0.5,
sigma.psi.yr = 0.2,
## visit
mu.v.0 = 0,
mu.v.yr = -0.1,
## type sym
type.range = 'all',
type.visit = 'visit_miss')
r <- data.frame(r = c(1,2))
p.yr <- data.frame(p.yr = c(-0.1, -0.05, 0, 0.05, 0.1))
mu.psi.yr <- data.frame(mu.psi.yr = c(-0.1, -0.05, 0, 0.05, 0.1))
nyr <- data.frame(nyr = c(2,5,10))
prop.visits.same <- data.frame(prop.visits.same = c(0,0.25,0.5,0.75,1))
all_scenarios <- bind_rows(expand.grid.df(base_scenario, p.yr, data.frame(mu.psi.yr = 0), r, nyr, prop.visits.same),
expand.grid.df(base_scenario, mu.psi.yr, data.frame(p.yr = 0), r, nyr, prop.visits.same)) %>%
unique()
run_all_simulation_1 <- function(s, all_scenarios){
sim.data <- make.data(## data structure set up
nsp = all_scenarios$nsp[s],
nsite = all_scenarios$nsite[s],
nyr = all_scenarios$nyr[s],
nvisit = all_scenarios$nvisit[s],
## detection
mu.p.0 = all_scenarios$mu.p.0[s],
p.yr = all_scenarios$p.yr[s],
sigma.p.site = all_scenarios$sigma.p.site[s],
sigma.p.sp = all_scenarios$sigma.p.sp[s],
## occupancy
mu.psi.0 = all_scenarios$mu.psi.0[s],
sigma.psi.sp = all_scenarios$sigma.psi.sp[s],
mu.psi.yr = all_scenarios$mu.psi.yr[s],
sigma.psi.yr = all_scenarios$sigma.psi.yr[s],
## visit
mu.v.0 = all_scenarios$mu.v.0[s],
mu.v.yr = all_scenarios$mu.v.yr[s],
## type sym
type.range = all_scenarios$type.range[s],
type.visit = all_scenarios$type.visit[s],
prop.visits.same = all_scenarios$prop.visits.same[s])
save(sim.data,
file=paste0("multi_sp/p2.2/outputs/", "sim.data/",
"_r_",all_scenarios[s,'r'],"_p.yr_",all_scenarios[s,'p.yr'],
"_mu.psi.yr_",all_scenarios[s,'mu.psi.yr'], "_nyr_",all_scenarios[s,'nyr'],
"_prop.visits.same_",all_scenarios[s,'prop.visits.same'],
"_range_", all_scenarios[s,'type.range'], "_visit_", all_scenarios[s,'type.visit'],
"_s_", s,
".RData"))
}
lapply(1:nrow(all_scenarios), run_all_simulation_1, all_scenarios =
all_scenarios)
run_prep_model <- function(file, case, range, model){
load(paste0("~/scratch/occ_historical/multi_sp/p2.2/outputs/sim.data/", file), verbose = TRUE)
#load(paste0("multi_sp/p2.2/outputs/sim.data/", file), verbose = TRUE)
## source model
source(sprintf('~/scratch/occ_historical/multi_sp/simulation/models/%s.R', model))
#source(sprintf('multi_sp/simulation/models/%s.R', model))
data.prepped <- prep.data(limit.to.visits = case, limit.to.range=range, sim.data)
## set model parameters
# n.iter=1e4
# n.burnin=1e2
# n.adapt=1e2
# n.thin=3e1
# n.chains=3
n.iter=1e2
n.burnin=1e1
n.adapt=1e1
n.thin=0
n.chains=3
## Initial values
Zst <- array(1,dim=c(sim.data$nsite,sim.data$nyr,sim.data$nsp))
inits <- list(Z = Zst,
mu.p.0 = 0,
p.yr = 0,
sigma.p.sp = 0.1,
p.sp = rep(0,sim.data$nsp),
sigma.p.site = 0.1,
p.site = matrix(0, nrow = sim.data$nsite, ncol = sim.data$nyr),
mu.psi.0 = 0,
sigma.psi.sp = 0.1,
psi.sp = rep(0,sim.data$nsp),
mu.psi.yr = 0,
sigma.psi.yr = 0.1,
psi.yr = rep(0,sim.data$nsp))
### nimble model
R.model <- nimbleModel(ms_nimble,
constants= data.prepped$my.constants,
data= data.prepped$my.data,
inits=inits,
check=FALSE)
mcmc.spec <- configureMCMC(R.model,
print=TRUE,
monitors=params,
thin=n.thin)
mcmc <- buildMCMC(mcmc.spec)
## compile model in C++
C.model <- compileNimble(R.model)
C.mcmc <- compileNimble(mcmc, project=R.model)
## run model
message('running model')
res <- runMCMC(C.mcmc,
niter=n.iter,
nburnin=n.burnin,
nchains=n.chains)
#### fix file name saving
save(res, data.prepped, sim.data,
file=paste0("~/scratch/occ_historical/multi_sp/p2.2/outputs/model.res/", case, range, file))
}
run_prep_model(file.choose(), case = 'all', range="no", model = 'ms-nimble')
setwd("D:/Github/occ_historical/multi_sp/p2.2")
run_prep_model("outputs/sim.data/0.1_mu.psi.yr_0_nyr_2_prop.visits.same_0.5_range_all_visit_visit_miss_s_61.RData", case = 'all', range="no", model = 'ms-nimble')
run_prep_model("0.5_range_all_visit_visit_miss_s_61.RData", case = 'all', range="no", model = 'ms-nimble')
setwd("D:/Github/occ_historical")
source('multi_sp/simulation/src/simulate_ms.R')
###### Part 1 #####
## 1.
# Simulation:
# - All species are everywhere, no ranges
# - Missing visits but same visit for all species
# Modeling:
# MS_all_all, MS_all_visits vs MS_all_detected for more than 2 eras
# this would be useful for a scenario that has small spatial scale
library(parallel)
library(dplyr)
source('multi_sp/simulation/src/simulate_ms.R')
expand.grid.df <- function(...) Reduce(function(...) merge(..., by=NULL), list(...))
## Make a data frame of the parameters
## Change either p.yr, or mu.psi.yr
base_scenario <- data.frame(nsp          = 50,
nsite        = 100,
nvisit       = 3,
## detection
mu.p.0 = -0.5,
sigma.p.site = 1.5,
sigma.p.sp = 0.5,
## occupancy
mu.psi.0 = 0,
sigma.psi.sp = 0.5,
sigma.psi.yr = 0.2,
## visit
mu.v.0 = 0,
mu.v.yr = 0.5,
## type sym
type.range = 'polys',
type.visit = 'visit_miss')
r <- data.frame(r = c(1, 2))
p.yr <- data.frame(p.yr = c(-0.1, -0.05, 0, 0.05, 0.1))
mu.psi.yr <- data.frame(mu.psi.yr = c(-0.1, -0.05, 0, 0.05, 0.1))
# mu.v.yr <- data.frame(mu.v.yr = c(-0.5, 0, 0.5))
nyr <- data.frame(nyr = c(2, 10))
prop.visits.same <- data.frame(prop.visits.same = c(0, 0.5, 1))
all_scenarios <- bind_rows(expand.grid.df(base_scenario, p.yr, data.frame(mu.psi.yr = 0, mu.v.yr = 0), r, nyr, prop.visits.same),
expand.grid.df(base_scenario, mu.psi.yr, data.frame(p.yr = 0, mu.v.yr = 0), r, nyr, prop.visits.same)) %>%
unique()
run_all_simulation_1 <- function(s, all_scenarios){
sim.data <- make.data(## data structure set up
nsp = all_scenarios$nsp[s],
nsite = all_scenarios$nsite[s],
nyr = all_scenarios$nyr[s],
nvisit = all_scenarios$nvisit[s],
## detection
mu.p.0 = all_scenarios$mu.p.0[s],
p.yr = all_scenarios$p.yr[s],
sigma.p.site = all_scenarios$sigma.p.site[s],
sigma.p.sp = all_scenarios$sigma.p.sp[s],
## occupancy
mu.psi.0 = all_scenarios$mu.psi.0[s],
sigma.psi.sp = all_scenarios$sigma.psi.sp[s],
mu.psi.yr = all_scenarios$mu.psi.yr[s],
sigma.psi.yr = all_scenarios$sigma.psi.yr[s],
## visit
mu.v.0 = all_scenarios$mu.v.0[s],
mu.v.yr = all_scenarios$mu.v.yr[s],
## type sym
type.range = all_scenarios$type.range[s],
type.visit = all_scenarios$type.visit[s],
prop.visits.same = all_scenarios$prop.visits.same[s])
save(sim.data,
file=paste0("multi_sp/p4/outputs/", "sim.data/",
"_r_",all_scenarios[s,'r'],"_p.yr_",all_scenarios[s,'p.yr'],
"_mu.psi.yr_",all_scenarios[s,'mu.psi.yr'], "_nyr_",all_scenarios[s,'nyr'],
"_prop.visits.same_",all_scenarios[s,'prop.visits.same'],
"_range_", all_scenarios[s,'type.range'], "_visit_", all_scenarios[s,'type.visit'],
"_mu.v.yr_", all_scenarios[s,'mu.v.yr'],
"_s_", s,
".RData"))
}
lapply(1:nrow(all_scenarios), run_all_simulation_1, all_scenarios =
all_scenarios)
###### Part 1 #####
## 1.
# Simulation:
# - All species are everywhere, no ranges
# - Missing visits but same visit for all species
# Modeling:
# MS_all_all, MS_all_visits vs MS_all_detected for more than 2 eras
# this would be useful for a scenario that has small spatial scale
library(parallel)
library(dplyr)
source('multi_sp/simulation/src/simulate_ms.R')
expand.grid.df <- function(...) Reduce(function(...) merge(..., by=NULL), list(...))
## Make a data frame of the parameters
## Change either p.yr, or mu.psi.yr
base_scenario <- data.frame(nsp          = 50,
nsite        = 100,
nvisit       = 3,
## detection
mu.p.0 = -0.5,
sigma.p.site = 1.5,
sigma.p.sp = 0.5,
## occupancy
mu.psi.0 = 0,
sigma.psi.sp = 0.5,
sigma.psi.yr = 0.2,
## visit
mu.v.0 = 0,
mu.v.yr = -0.1,
## type sym
type.range = 'polys',
type.visit = 'visit_miss')
r <- data.frame(r = c(1, 2))
p.yr <- data.frame(p.yr = c(-0.1, -0.05, 0, 0.05, 0.1))
mu.psi.yr <- data.frame(mu.psi.yr = c(-0.1, -0.05, 0, 0.05, 0.1))
# mu.v.yr <- data.frame(mu.v.yr = c(-0.5, 0, 0.5))
nyr <- data.frame(nyr = c(2, 5, 10))
prop.visits.same <- data.frame(prop.visits.same = c(0, 0.25, 0.5, 0.75, 1))
all_scenarios <- bind_rows(expand.grid.df(base_scenario, p.yr, data.frame(mu.psi.yr = 0), r, nyr, prop.visits.same),
expand.grid.df(base_scenario, mu.psi.yr, data.frame(p.yr = 0), r, nyr, prop.visits.same)) %>%
unique()
run_all_simulation_1 <- function(s, all_scenarios){
sim.data <- make.data(## data structure set up
nsp = all_scenarios$nsp[s],
nsite = all_scenarios$nsite[s],
nyr = all_scenarios$nyr[s],
nvisit = all_scenarios$nvisit[s],
## detection
mu.p.0 = all_scenarios$mu.p.0[s],
p.yr = all_scenarios$p.yr[s],
sigma.p.site = all_scenarios$sigma.p.site[s],
sigma.p.sp = all_scenarios$sigma.p.sp[s],
## occupancy
mu.psi.0 = all_scenarios$mu.psi.0[s],
sigma.psi.sp = all_scenarios$sigma.psi.sp[s],
mu.psi.yr = all_scenarios$mu.psi.yr[s],
sigma.psi.yr = all_scenarios$sigma.psi.yr[s],
## visit
mu.v.0 = all_scenarios$mu.v.0[s],
mu.v.yr = all_scenarios$mu.v.yr[s],
## type sym
type.range = all_scenarios$type.range[s],
type.visit = all_scenarios$type.visit[s],
prop.visits.same = all_scenarios$prop.visits.same[s])
save(sim.data,
file=paste0("multi_sp/p4/outputs/", "sim.data/",
"_r_",all_scenarios[s,'r'],"_p.yr_",all_scenarios[s,'p.yr'],
"_mu.psi.yr_",all_scenarios[s,'mu.psi.yr'], "_nyr_",all_scenarios[s,'nyr'],
"_prop.visits.same_",all_scenarios[s,'prop.visits.same'],
"_range_", all_scenarios[s,'type.range'], "_visit_", all_scenarios[s,'type.visit'],
"_mu.v.yr_", all_scenarios[s,'mu.v.yr'],
"_s_", s,
".RData"))
}
lapply(1:nrow(all_scenarios), run_all_simulation_1, all_scenarios =
all_scenarios)
