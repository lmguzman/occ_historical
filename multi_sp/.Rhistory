theme_cowplot()+
background_grid()
ggdistribution(dnorm, seq(-3,3,0.1), mean=0, sd=1)+
theme_cowplot()+
background_grid()
# ** Logistic distribution centered a 0 with a scale factor of 1.5 **
ggdistribution(dlogis, seq(-10,10,0.1), location=0, scale=1.5)+
theme_cowplot()+
background_grid()
?dgamma
ggdistribution(dgamma, seq(-10,10,0.1), shape=1, rate=2)+
theme_cowplot()+
background_grid()
ggdistribution(dgamma, seq(-10,10,0.1), shape=1, rate=0.5)+
theme_cowplot()+
background_grid()
ggdistribution(dgamma, seq(-10,10,0.1), shape=1, rate=0.5, log=TRUE)+
theme_cowplot()+
background_grid()
?dgamma
ggdistribution(pgamma, seq(-10,10,0.1), shape=1, rate=0.5)+
theme_cowplot()+
background_grid()
?dgamma
# ** Gamma distribution
ggdistribution(dgamma, seq(-10,10,0.1), shape=1, rate=0.5)+
theme_cowplot()+
background_grid()
ggdistribution(plogis, seq(-10,10,0.1), location=0, scale=1.5)+
theme_cowplot()+
background_grid()
# ** Logistic distribution **
ggdistribution(dlogis, seq(-10,10,0.1), location=0, scale=1.5)+
theme_cowplot()+
background_grid()
?dbinom
ggdistribution(dbinom, seq(-10,10,0.1), size=1, p=c(0.5))+
theme_cowplot()+
background_grid()
ggdistribution(dbinom, seq(-10,10,0.1), size=1, prob=c(0.5))+
theme_cowplot()+
background_grid()
ggdistribution(dbinom, seq(0,1,0.1), size=1, prob=c(0.5))+
theme_cowplot()+
background_grid()
ggdistribution(dbinom, seq(0,1,0.1), size=1, prob=c(0.5, 0.5))+
theme_cowplot()+
background_grid()
ggdistribution(dbinom, seq(0,1,0.1), size=1, prob=c(0.25))+
theme_cowplot()+
background_grid()
ggdistribution(dbinom, seq(0,1,0.1), size=10, prob=c(0.25))+
theme_cowplot()+
background_grid()
?dpois
ggdistribution(dpois, seq(0,1,0.1), lambda=1)+
theme_cowplot()+
background_grid()
?dpois
ggdistribution(dpois, seq(0,7,0.1), lambda=1)+
theme_cowplot()+
background_grid()
# ** Poisson distribution **
ggdistribution(dpois, seq(0,7,1), lambda=1)+
theme_cowplot()+
background_grid()
ggdistribution(dpois, seq(0,7,1), lambda=10)+
theme_cowplot()+
background_grid()
ggdistribution(dpois, seq(0,7,1), lambda=0.1)+
theme_cowplot()+
background_grid()
ggdistribution(dpois, seq(0,7,1), lambda=0.5)+
theme_cowplot()+
background_grid()
ggdistribution(dpois, seq(0,7,0.5), lambda=0.5)+
theme_cowplot()+
background_grid()
ggdistribution(dpois, seq(0,100,1), lambda=0.5)+
theme_cowplot()+
background_grid()
ggdistribution(dpois, seq(0,100,1), lambda=1.1)+
theme_cowplot()+
background_grid()
ggdistribution(dpois, seq(0,100,1), lambda=2)+
theme_cowplot()+
background_grid()
ggdistribution(dpois, seq(0,100,1), lambda=0)+
theme_cowplot()+
background_grid()
ggdistribution(dpois, seq(0,100,1), lambda=1)+
theme_cowplot()+
background_grid()
ggdistribution(dpois, seq(0,50,1), lambda=1)+
theme_cowplot()+
background_grid()
?dt
ggdistribution(dt, seq(0,1,1), ncp=0, df=1)+
theme_cowplot()+
background_grid()
ggdistribution(dt, seq(0,1,1), ncp=0, df=5)+
theme_cowplot()+
background_grid()
ggdistribution(dt, seq(-5,5,1), ncp=0, df=5)+
theme_cowplot()+
background_grid()
ggdistribution(dt, seq(-5,5,0.1), ncp=0, df=5)+
theme_cowplot()+
background_grid()
ggdistribution(dt, seq(-5,5,0.1), ncp=0, df=1)+
theme_cowplot()+
background_grid()
?dweibull
ggdistribution(dweibull, seq(-5,5,0.1), shape=2, scale=1)+
theme_cowplot()+
background_grid()
ggdistribution(dweibull, seq(-5,5,0.1), shape=5, scale=1)+
theme_cowplot()+
background_grid()
ggdistribution(dweibull, seq(-5,5,0.1), shape=0.5, scale=1)+
theme_cowplot()+
background_grid()
ggdistribution(dweibull, seq(-5,5,0.1), shape=0.001, scale=1)+
theme_cowplot()+
background_grid()
ggdistribution(dweibull, seq(-5,5,0.1), shape=2, scale=3)+
theme_cowplot()+
background_grid()
ggdistribution(dweibull, seq(0,10,0.1), shape=2, scale=3)+
theme_cowplot()+
background_grid()
ggdistribution(dweibull, seq(0,10,0.1), shape=1, scale=3)+
theme_cowplot()+
background_grid()
ggdistribution(dweibull, seq(0,10,0.1), shape=3, scale=3)+
theme_cowplot()+
background_grid()
# ** Weibull distribution **
ggdistribution(dweibull, seq(0,10,0.1), shape=100, scale=3)+
theme_cowplot()+
background_grid()
ggdistribution(dweibull, seq(0,10,0.1), shape=1, scale=2.5)+
theme_cowplot()+
background_grid()
ggdistribution(dweibull, seq(0,10,0.1), shape=1, scale=4)+
theme_cowplot()+
background_grid()
ggdistribution(dweibull, seq(0,10,0.1), shape=2, scale=4)+
theme_cowplot()+
background_grid()
ggdistribution(dlogis, seq(-10,10,0.1), location=0, scale=1.5)+
theme_cowplot()+
background_grid()
ggdistribution(dlogis, seq(-10,10,0.1), location=0, scale=1.5, log=TRUE)+
theme_cowplot()+
background_grid()
ggdistribution(dlogis, seq(-10,10,0.1), location=0, scale=1.5)+
scale_x_log10()+
theme_cowplot()+
background_grid()
#
ggdistribution(plogis, seq(-10,10,0.1), location=0, scale=1.5)+
theme_cowplot()+
background_grid()
ggdistribution(dweibull, seq(0,10,0.1), shape=2, scale=4)+
theme_cowplot()+
background_grid()
ggdistribution(dunif, seq(-2,2,0.1), min=-2, max=2)+
theme_cowplot()+
background_grid()
ggdistribution(dnorm, seq(-3,3,0.1), mean=0, sd=1)+
theme_cowplot()+
background_grid()
ggdistribution(dbinom, seq(0,1,0.1), size=1, prob=c(0.25))+
theme_cowplot()+
background_grid()
ggdistribution(dbinom, seq(0,1,0.1), size=10, prob=c(0.25))+
theme_cowplot()+
background_grid()
ggdistribution(dbinom, seq(0,1,1), size=1, prob=c(0.25))+
theme_cowplot()+
background_grid()
ggdistribution(dbinom, seq(0,1,1), size=10, prob=c(0.25))+
theme_cowplot()+
background_grid()
ggdistribution(dbinom, seq(0,1,0.5), size=10, prob=c(0.25))+
theme_cowplot()+
background_grid()
ggdistribution(dbinom, seq(0,1,0.5), size=1, prob=c(0.25))+
theme_cowplot()+
background_grid()
?rnorm
library(tidyverse)
t1 <- rnorm(1, mean=0, sd=1)
t2 <- rnorm(1, mean=1, sd=1)
t3 <- rnorm(1, mean=-3, sd=1)
dat <- rbind(t1, t2, t3) %>% as.data.frame()
head(dat)
dat <- cbind(t1, t2, t3) %>% as.data.frame()
dat
hist(dat)
?geom_histogram
treatment <- c("con", "mid", "low")
t1 <- rnorm(1, mean=0, sd=1)
t2 <- rnorm(1, mean=1, sd=1)
t3 <- rnorm(1, mean=-3, sd=1)
dat <- cbind(treatment, t1, t2, t3) %>% as.data.frame()
dat
dat <- rbind(treatment, t1, t2, t3) %>% as.data.frame()
dat
dat <- cbind(treatment, t1, t2, t3) %>% as.data.frame()
dat
t1 <- rnorm(1, mean=0, sd=1)
t2 <- rnorm(1, mean=1, sd=1)
t3 <- rnorm(1, mean=-3, sd=1)
dat <- cbind(t1, t2, t3) %>% as.data.frame()
dat
dat <- cbind(t1, t2, t3) %>% as.data.frame()
par(mfrow=c(1,3))
hist(dat$t1)
hist(dat$t2)
hist(dat$t3)
par(mfrow=c(3,1))
hist(dat$t1)
hist(dat$t2)
hist(dat$t3)
t1 <- rnorm(5, mean=0, sd=1)
t2 <- rnorm(5, mean=1, sd=1)
t3 <- rnorm(5, mean=-3, sd=1)
dat <- cbind(t1, t2, t3) %>% as.data.frame()
par(mfrow=c(3,1))
hist(dat$t1)
hist(dat$t2)
hist(dat$t3)
t1 <- rnorm(10, mean=0, sd=1)
t2 <- rnorm(10, mean=1, sd=1)
t3 <- rnorm(10, mean=-3, sd=1)
dat <- cbind(t1, t2, t3) %>% as.data.frame()
par(mfrow=c(3,1))
hist(dat$t1)
hist(dat$t2)
hist(dat$t3)
t1 <- rnorm(100, mean=0, sd=1)
t2 <- rnorm(100, mean=1, sd=1)
t3 <- rnorm(100, mean=-3, sd=1)
dat <- cbind(t1, t2, t3) %>% as.data.frame()
par(mfrow=c(3,1))
hist(dat$t1)
hist(dat$t2)
hist(dat$t3)
t1 <- rnorm(1000, mean=0, sd=1)
t2 <- rnorm(1000, mean=1, sd=1)
t3 <- rnorm(1000, mean=-3, sd=1)
dat <- cbind(t1, t2, t3) %>% as.data.frame()
par(mfrow=c(3,1))
hist(dat$t1)
hist(dat$t2)
hist(dat$t3)
t1 <- rnorm(10000, mean=0, sd=1)
t2 <- rnorm(10000, mean=1, sd=1)
t3 <- rnorm(10000, mean=-3, sd=1)
dat <- cbind(t1, t2, t3) %>% as.data.frame()
par(mfrow=c(3,1))
hist(dat$t1)
hist(dat$t2)
hist(dat$t3)
t1 <- rnorm(1e6, mean=0, sd=1)
t2 <- rnorm(1e6, mean=1, sd=1)
t3 <- rnorm(1e6, mean=-3, sd=1)
dat <- cbind(t1, t2, t3) %>% as.data.frame()
par(mfrow=c(3,1))
hist(dat$t1)
hist(dat$t2)
hist(dat$t3)
t1 <- rnorm(1e4, mean=0, sd=1)
t2 <- rnorm(1e4, mean=1, sd=1)
t3 <- rnorm(1e4, mean=-3, sd=1)
dat <- cbind(t1, t2, t3) %>% as.data.frame()
par(mfrow=c(3,1))
hist(dat$t1)
hist(dat$t2)
hist(dat$t3)
library(tidyverse); library(ggfortify); library(cowplot)
# ** Uniform distribution **
# This is the simplest distribution, where the data are equally
# represented (frequent) across its range.
ggdistribution(dunif, seq(-3,3,0.1), min=-2, max=2)+
theme_cowplot()+
background_grid()
ggdistribution(dnorm, seq(-3,3,0.1), mean=0, sd=1)+
theme_cowplot()+
background_grid()
ggdistribution(dbinom, seq(0,1,0.5), size=1, prob=c(0.25))+
theme_cowplot()+
background_grid()
ggdistribution(dbinom, seq(0,1,0.5), size=10, prob=c(0.25))+
theme_cowplot()+
background_grid()
ggdistribution(dpois, seq(0,50,1), lambda=1)+
theme_cowplot()+
background_grid()
ggdistribution(dweibull, seq(0,10,0.1), shape=2, scale=4)+
theme_cowplot()+
background_grid()
version
pow(1, -2)
1/(2^2)
1/(5^2)
1/(10^2)
1/(1^2)
1/(1.2^2)
1/(1.99^2)
1/(1.0001^2)
hist(rnorm(-0.2, 0.25))
hist(rnorm(66, -0.2, 0.25))
hist(rnorm(66, -0.2, 0.64))
hist(rnorm(66, -0.4, 0.64))
hist(rnorm(66, -0.4, 1))
hist(rnorm(66, -0.4, 0.25))
read.csv(file.choose())
read.csv(file.choose(), header=TRUE, sep="\t")
dat<-read.csv(file.choose(), header=TRUE, sep="\t")
names(dat)
min(dat$elevation)
dat.full <- dat[!is.na(dat$elevation),]
min(dat.full$elevation)
max(dat.full$elevation)
hist(dat.full$elevation)
install.packages("wallace")
library(wallace)
run_wallace()
4e5
library(wallace)
run_wallace()
install.packages(c("mcmcplots", "CARBayesdata", "sp", "spdep", "classInt", "coda"))
library(remotes)
install_github("nimble-dev/compareMCMCs", subdir = "compareMCMCs")
install.packages("remotes")
library(remotes)
install_github("nimble-dev/compareMCMCs", subdir = "compareMCMCs")
library(remotes)
install_github("nimble-dev/compareMCMCs", subdir = "compareMCMCs", INSTALL_opts = "--no-multiarch")
install.packages(c("nimbleEcology", "nimbleSCR"))
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE)
has_ggplot2 <- require(ggplot2)
has_mcmcplots <- require(mcmcplots)
has_coda <- require(coda)
generate_original_results <- FALSE
library(nimble)
DeerEcervi <- read.table(file.path('..', 'examples', 'DeerEcervi', 'DeerEcervi.txt'), header = TRUE)
summary(DeerEcervi)
## Create presence/absence data from counts.
DeerEcervi$Ecervi_01 <- DeerEcervi$Ecervi
DeerEcervi$Ecervi_01[DeerEcervi$Ecervi>0] <- 1
## Set up naming convention for centered and uncentered lengths for exercises later
DeerEcervi$unctrLength <- DeerEcervi$Length
## Center Length for better interpretation
DeerEcervi$ctrLength <- DeerEcervi$Length - mean(DeerEcervi$Length)
## Make a factor version of Sex for plotting
DeerEcervi$fSex <- factor(DeerEcervi$Sex)
## Make a factor and id version of Farm
DeerEcervi$fFarm <- factor(DeerEcervi$Farm)
DeerEcervi$farm_ids <- as.numeric(DeerEcervi$fFarm)
ggplot(data = DeerEcervi,
mapping = aes(x = ctrLength, y = Ecervi_01, color = fSex)) +
geom_point() +
geom_jitter(width = 0, height = 0.1) +
facet_wrap(~Farm)
DEcode <- nimbleCode({
for(i in 1:2) {
# Priors for intercepts and length coefficients for sex = 1 (male), 2 (female)
sex_int[i] ~ dnorm(0, sd = 1000)
length_coef[i] ~ dnorm(0, sd = 1000)
}
# Priors for farm random effects and their standard deviation.
farm_sd ~ dunif(0, 20)
for(i in 1:num_farms) {
farm_effect[i] ~ dnorm(0, sd = farm_sd)
}
# logit link and Bernoulli data probabilities
for(i in 1:num_animals) {
logit(disease_probability[i]) <-
sex_int[ sex[i] ] +
length_coef[ sex[i] ]*length[i] +
farm_effect[ farm_ids[i] ]
Ecervi_01[i] ~ dbern(disease_probability[i])
}
})
DEconstants <- list(num_farms = 24,
num_animals = 826,
length = DeerEcervi$ctrLength,
sex = DeerEcervi$Sex,
farm_ids = DeerEcervi$farm_ids)
DEmodel <- nimbleModel(DEcode,
constants = DEconstants)
DEmodel$setData(list(Ecervi_01 = DeerEcervi$Ecervi_01))
# This sets the values and *flags the nodes as data*.
DEinits <- function() {
list(sex_int = c(0, 0),
length_coef = c(0, 0),
farm_sd = 1,
farm_effect = rnorm(24, 0, 1) )
}
set.seed(123)
DEmodel$setInits(DEinits())
DEmcmc <- buildMCMC(DEmodel)
cDEmodel <- compileNimble(DEmodel)
# cDEmodel <- compileNimble(DEmodel)
# First call to compileNimble in a session is slower than later calls.
cDEmcmc <- compileNimble(DEmcmc, project = DEmodel)
printErrors()
# cDEmodel <- compileNimble(DEmodel)
# First call to compileNimble in a session is slower than later calls.
cDEmcmc <- compileNimble(DEmcmc, project = DEmodel)
Sys.getenv("PATH")
# cDEmodel <- compileNimble(DEmodel)
# First call to compileNimble in a session is slower than later calls.
cDEmcmc <- compileNimble(DEmcmc, project = DEmodel)
printErrors()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
2.5e5-2e5
5e4
5e4/100
500*4
# read in butterfly traits (wingspan)
tr_list <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE)
# read in species list
sp_list <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE)
names(sp_list)
names(tr_list)
table(sp_list$species %in% tr_list$NN_Species)
head(tr_list)
2271/2311
# read in butterfly traits (wingspan)
tr_list <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE)
table(sp_list$species %in% tr_list$NN_Species)
tr_list <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE)
table(sp_list$species %in% tr_list$NN_Species)
tr_list <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE)
names(tr_list)
table(sp_list$species %in% tr_list$accepted_name)
table(sp_list$species %in% tr_list$accepted_name)/2311
tr_list <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE)
table(sp_list$species %in% tr_list$accepted_name)/2311
tr_list <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE)
table(sp_list$species %in% tr_list$accepted_name)/2311
tr_list <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE)
table(sp_list$species %in% tr_list$accepted_name)/2311
tr_list <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE)
names(tr_list)
table(sp_list$species %in% tr_list$NN_Species)/2311
tr_list <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE)
names(tr_list)
table(sp_list$species %in% tr_list$NN_Species)/2311
tr_list <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE)
names(tR_list)
names(tr_list)
table(sp_list$species %in% tr_list$NN_Species)/2311
tr_list <- read.csv(file.choose(), header=TRUE, stringsAsFactors=FALSE)
table(sp_list$species %in% tr_list$NN_Species)/2311
setwd("D:/Github/occ_historical/multi_sp")
library(stringr)
library(mcmcr)
library(coda)
library(purrr)
library(dplyr)
library(data.table)
file_sim <- list.files("p4/outputs/model.res/decr_visit/", pattern="yes")
compiled_res <- list()
for(i in 1:length(file_sim)){
load(paste0("p4/outputs/model.res/decr_visit/",file_sim[i]), verbose = TRUE)
file_params <- unlist(str_split(file_sim[i], "_"))
samplech1 <- as.mcmc(res$chain1)
samplech2 <- as.mcmc(res$chain2)
samplech3 <- as.mcmc(res$chain3)
coda.samples <- as.mcmc.list(samplech1, samplech2, samplech3)
summary_mcmc <- coef(coda.samples, simplify = TRUE)
rhat_mcmc <- map_df(rhat(coda.samples, by = "term"), ~data.frame(rhat = .x), .id = 'term')
true_value <- map_df(sim.data[summary_mcmc$term], ~data.frame(true_val = .x), .id = 'term')
compiled_res[[i]] <- full_join(full_join(summary_mcmc, rhat_mcmc), true_value) %>%
mutate(range_sim = file_params[13], range_mod = NA, visit_sim = file_params[18], visit_mod = file_params[1],
r = file_params[3], nyr = file_params[9], prop.visits.same = file_params[11], s = i) %>%
data.table()
}
all_outputs <- rbindlist(compiled_res)
saveRDS(all_outputs, 'p4/outputs/model.summary/decr_visit/all_censored_outputs.rds')
library(stringr)
library(mcmcr)
library(coda)
library(purrr)
library(dplyr)
library(data.table)
file_sim <- list.files("p4/outputs/model.res/decr_visit/", pattern="no")
compiled_res <- list()
for(i in 1:length(file_sim)){
load(paste0("p4/outputs/model.res/decr_visit/",file_sim[i]), verbose = TRUE)
file_params <- unlist(str_split(file_sim[i], "_"))
samplech1 <- as.mcmc(res$chain1)
samplech2 <- as.mcmc(res$chain2)
samplech3 <- as.mcmc(res$chain3)
coda.samples <- as.mcmc.list(samplech1, samplech2, samplech3)
summary_mcmc <- coef(coda.samples, simplify = TRUE)
rhat_mcmc <- map_df(rhat(coda.samples, by = "term"), ~data.frame(rhat = .x), .id = 'term')
true_value <- map_df(sim.data[summary_mcmc$term], ~data.frame(true_val = .x), .id = 'term')
compiled_res[[i]] <- full_join(full_join(summary_mcmc, rhat_mcmc), true_value) %>%
mutate(range_sim = file_params[13], range_mod = NA, visit_sim = file_params[18], visit_mod = file_params[1],
r = file_params[3], nyr = file_params[9], prop.visits.same = file_params[11], s = i) %>%
data.table()
}
all_outputs <- rbindlist(compiled_res)
saveRDS(all_outputs, 'p4/outputs/model.summary/decr_visit/all_uncensored_outputs.rds')
